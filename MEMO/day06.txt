*day06
문자열도 인덱싱과 슬라이싱이 가능하다.

[문자열에 관련된 메서드]
#count() 메서드 
문자열 내부에 포함된 특정 문자열의 개수를 반환하는 메서드

#find() 메서드 
문자열 내부에 포함된 특정 문자열을 찾고자 할 때 사용한다.
찾고자 하는 문자열이 있으면 그 문자열이 처음 나온 인덱스를 반환한다.

#대소문자 변환 메서드
-upper() : 모두 대문자로 변환
-lower() : 모두 소문자로 변환
-capitalize() : 첫글자만 대문자(나머지 소문자)로 변환 

#join()메서드 
인수로 전달한 반복가능 객체(문자열, 리스트 등) 각 요소 사이에
문자열을 포함시켜 새로운 문자열을 만든다.

#split()
하나의 문자열을 여러 개의 문자열로 분리해서 저장한 리스트를 반환하는 메서드

#replace()
일부 문자열을 다른 문자열로 바꾼 결과를 반환

문자열을 수정해야 하는 경우
str = 'hello'
방법1 : 다시 작성한다
str='yello'

방법2 : 연산자와 슬라이싱을 이용 이용
str='hello'
str='y'+str[1:] #1번부터(방향 : 오른쪽) 가져온다
print(str)
----------------------------------------------------------------------------------
'(홑따옴표)와 "(쌍따옴표')의 사용
문자열에 '를 사용하거나 "를 사용해야하는 경우가 존재한다.

- '를 사용해야 하는 경우 ""에 묶어서 문자열로 표시하기
- "를 사용해야 하는 경우 ''에 묶어서 문자열로 표시하기

Escape Sequence(\)를 활용해서 사용할 수 있다.
\'
\"

--------------------------------------------------------------------------------
[리스트 메서드]
list는 대괄호([])사이에 값을 넣어 만들 수 있다.
데이터(원소, 요소)들은 컴마(,)를 통해 구분한다.
각 데이터들은 어떤 타입도 가능하다 -> 리스트도 데이터로 들어갈 수 있다.
인덱싱, 슬라이싱이 가능하다.

# 리스트 관련 함수
-len(list) : 리스트의 길이를 반환한다.
-index(value) : value의 인덱스를 반환한다.
-append(value) : 리스트에 value를 뒤에 추가한다.
-extend(list) : 리스트에 리스트를 뒤에 추가한다.
-insert(index,value) : 리스트의 index에 value를 추가한다.
-pop(n) : n번째 데이터를 추출한다.
-remove(value) : 리스트 내에서 주어진 value와 동일한 value를 모두 제거한다.
-count(value) : 리스트 내에서 주어진 value와 동일한 value의 개수를 카운트 한다.
-del(list[index]) : 리스트의 데이터를 삭제한다.
-sort() : 데이터의 원소를 오름차순으로 정렬한다.
-sum(list) : 데이터의 원소의 합을 반환한다.

# 리스트 연산
- + : 리스트 사이에 연산을 하면 두 개의 리스트를 합한 리스트가 나온다.
- * : 리스트*정수 형태로 연산을 하면 해당 리스트가 정수배만큼 추가된 리스트가 나온다.
- in : 리스트에 데이터가 존재하는지 bool타입으로 반환 (True/False)
------------------------------------------------------------------------------------
세트 메서드
1.교집합
두개의 세트에서 공통적인 요소만 추출하여 새로운 세트를 생성하는 연산

2.합집합
두개의 세트에서 모든 요소를 합친 새로운 집합을 생성하는 연산

3.차집합
한 집합에서 다른 집합 요소를 뺀 새로운 집합을 생성하는 집합 연산

set의 활용
1. 중복된 값을 제거하기 위해 사용한다.
2. 해쉬값을 사용해 더 빠른 탐색을 위해 사용한다.
----------------------------------------------------------------------------------
딕셔너리
-딕셔너리는 key-value쌍으로 저장되는 데이터 집합
-딕셔너리는 순서가 없기 때문에 인덱싱이 불가능하지만,
 key를 이용한 검색이 가능한다

딕셔너리의 데이터 수정/추가/삭제
1. 데이터의 수정 > 딕셔너리명[기존 key] = 수정할 데이터
2. 데이터의 추가 > 딕셔너리명[새로운 key] = 추가할 value
3. 데이터의 삭제 > del 함수 사용

딕셔너리메서드
1.keys() : 딕셔너리의 모든 key를 반환한다.
2.values() : 딕셔너리의 모든 value를 반환한다.
3.items() : 딕셔너리의 모든 key와 value 쌍을 반환한ㄷ.
----------------------------------------------------------------------------------
[이중리스트]
list가 list의 원소로 들어간 형태
N중 리스트 라고 표현한다.

이중리스트는 2차원 문제를 해결할 때 주로 사용한다.
이중 리스트는 두 개의 인덱싱을 활용해 하나의 개별 원소에 접근한다.

- 이중 리스트에서 [][] : 개별 원소에 접근
- 이중 리스트에서 [] : 1차원 리스트에 접근
