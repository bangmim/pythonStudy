day04

컬렉션
'모음' 이라는 뜻으로 파이썬에서는 여러 개의 값을 하나의 이름으로
묶어서 관리하는 자료형이다.

-리스트(list) : 추가, 수정, 삭제가 언제나 가능 a = [값1, 값2]
-튜플(tuple) : 생성되고 나면 변경 불가능 a = 값1, 값2, (값 뒤에 ,(컴마))
-세트(set) : 중복된 값의 저장이 불가능 a = {값1, 값2, 값3}
-딕셔너리(dict) : key  + value값으로 관리 a = {'key':'value'}
---------------------------------------------------------------------
1. 리스트
여러 값을 저장할 때 가장 많이 사용하는 자료형
저장하고자 하는 값들의 자료형(int, float, str)들이 서로 다르더라도
하나의 리스트에 저장할 수 있다.

<구조>
리스트명 = [값1, 값2, 값3, ...]

신상정보 저장
name = '홍길동'
age = 25
height = 180.6
weight = 76
email = 'hong@gmail.com'
address = '서울'
bloodType = 'ab'
gender = '남자'

info = ['홍길동', 25, 180.6, 76, 'hong@gmail.com', '서울', 'ab', '남자']

  1)리스트의 인덱싱
    리스트는 저장된 요소들마다 고유 번호인 인덱스(indext)를 부여하는
    순서대로 관리할 수 있다.
    출력시 리스트명 [index]
  2)리스트의 슬라이싱
    리스트의 일부요소만 이용하고자 하는 경우 활용
    li=[10,20,30,40,50]
    리스트명 [시작하는 인덱스 : 종료하는 인덱스]
  3) 리스트의 요소 추가와 삭제
    리스트에 새로운 요소를 추가할 때는 .
    append(), insert()메서드를 사용할 수 있다.
    기존 요소를 삭제할 때는 pop()메서드를 사용할 수 있다.
-----------------------------------------------------------------------------
2. 튜플
저장된 값을 변경할 수 없는 리스트 
프로그램이 실행되는 동안 값이 변경되면 안되는 경우 사용
튜플은 리스트에 비해 적은 메모리를 필요로 하고, 속도가 빠르다는 장점이
있다.

튜플명 = (값1, 값2, ...)
튜플명 = (값1,) # ,(콤마)를 꼭 적어야 한다.
----------------------------------------------------------------------------
3. 세트
수학의 집합 개념을 구현한 자료
저장된 값들은 순서가 없기 때문에 인덱싱과 슬라이싱이 불가능
대신 값의 중복저장이 불가능하다는 특징을 활용해 중복 제거용으로 
사용하거나 교집합, 합집합, 차집합 등과 같은 집합개념이 필요한 경우
사용할 수 있다.
-----------------------------------------------------------------------------
[반복문 for]
내가 원하는 횟수만큼 명령을 반복하는 문법

*   while	    vs 	for
===================
무한 루프 	X
횟수 부정확	확실

<구조>
for 변수 in 반복 가능 객체:
	반복하고자 하는 명령

#반복 가능 객체
1.시퀀스 자료형
   -문자열 : 'Hello'
   -리스트 : [1,2,3]
   -튜플 : {1,2,3}
   -range

2.비시퀀스 자료형
   -세트 : {1,2,3,}
   -딕셔너리 : {'a':'apple', 'b':'banana', 'c':'cherry'}
-----------------------------------------------------------------------------
#range()함수
range()함수는 정수 범위를 만들어 낼 때 유용한 함수
for문과 range()함수를 함께 사용하면 개발자가 원하는 값을
쉽게 생성할 수 있다.

<구조>
range(초기값(시작값), 종료값, 증감값)

특징
1.초기값부터 종료값 -1까지 숫자들의 컬렉션을 만든다.
2.초기값을 생략하면 0부터 시작한다.
3.종료값은 생략할 수 없다.
4. 증감값을 생략하면 1씩 증가한다.
-----------------------------------------------------------------------------
[기타제어문]
반복문 안에서만 사용할 수 있다.
기타제어문 밑에는 어떠한 코드도 올 수 없다.
-break
-continue

[break]
break를 만나면 가장 가까이 있는 반복문을 빠져나간다.

[continue]
continue를 만나면 가장 가까이 있는 반복문으로 돌아간다.

